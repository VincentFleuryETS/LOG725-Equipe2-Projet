//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Inputs/PlayerControls.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerControls: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerControls()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerControls"",
    ""maps"": [
        {
            ""name"": ""Player"",
            ""id"": ""fbcb7b09-9cc4-4f51-a8e8-c5acc36edd3a"",
            ""actions"": [
                {
                    ""name"": ""Mouvement"",
                    ""type"": ""Value"",
                    ""id"": ""5bbf2785-1c59-4cba-84ae-7bda52f22d1a"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Saut"",
                    ""type"": ""Button"",
                    ""id"": ""def4582c-1fec-4de0-a9a0-317b4c62890b"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pouvoir Air"",
                    ""type"": ""Button"",
                    ""id"": ""33115c9c-c105-4116-8815-75ca694a66c6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pouvoir Eau"",
                    ""type"": ""Button"",
                    ""id"": ""bcc84f82-5507-41f9-a193-7a53fdeb0ef6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Pouvoir Terre"",
                    ""type"": ""Button"",
                    ""id"": ""fc47801a-2384-4fb7-9fa0-d01902f28d35"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pouvoir Feu"",
                    ""type"": ""Button"",
                    ""id"": ""3de15b0a-4a6c-4713-9862-6d51fefa18c6"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Recommencer"",
                    ""type"": ""Button"",
                    ""id"": ""12a4eb75-2293-460b-8dc1-7c6a1ffceb89"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Pause"",
                    ""type"": ""Button"",
                    ""id"": ""c7cb0fe5-1ba1-4f39-9d00-1c6e705ff503"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""74e45ea6-4ba0-4eb1-ba22-4811b7588a19"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Saut"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""Arrows"",
                    ""id"": ""e3c6786f-4ec9-41ab-9e8f-0f17c783549b"",
                    ""path"": ""2DVector(mode=2)"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouvement"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""0c5210e4-e747-4cf4-8dfd-b81319217142"",
                    ""path"": ""<Keyboard>/upArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""c9acd66f-7bad-4071-a5d3-561f4bef98d2"",
                    ""path"": ""<Keyboard>/downArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""85c79f8e-6bec-43eb-8814-e7e68a0d9002"",
                    ""path"": ""<Keyboard>/leftArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""1a0bb0d4-a4fe-4c3f-beff-19e0e4b18b34"",
                    ""path"": ""<Keyboard>/rightArrow"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Mouvement"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""78846304-2afe-4645-9ab0-ca565fd78e2b"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Pouvoir Air"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""333c7fcc-bd0c-4b8f-90c5-bf79bba63d4e"",
                    ""path"": ""<Keyboard>/c"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Pouvoir Eau"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e45bbcdf-0609-4017-a832-74ed57c6c748"",
                    ""path"": ""<Keyboard>/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Pouvoir Terre"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9319ea0e-fff7-4be5-a2e4-f8ce7d8db333"",
                    ""path"": ""<Keyboard>/z"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Pouvoir Feu"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""e22d5e5c-951d-4688-947b-0bdc11d7551a"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Recommencer"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""8c6ed63b-3c79-4ef1-af38-073b39370af0"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Pause"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""UI"",
            ""id"": ""702e9dff-d8d7-4893-bb53-178c2e995df4"",
            ""actions"": [
                {
                    ""name"": ""Sortir"",
                    ""type"": ""Button"",
                    ""id"": ""763d233d-ba55-457d-972e-c82c7e85d952"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""226277ab-ab9d-461e-83f2-d9fc57bb7a24"",
                    ""path"": ""<Keyboard>/escape"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": "";Keyboard"",
                    ""action"": ""Sortir"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": [
        {
            ""name"": ""Keyboard"",
            ""bindingGroup"": ""Keyboard"",
            ""devices"": [
                {
                    ""devicePath"": ""<Keyboard>"",
                    ""isOptional"": false,
                    ""isOR"": false
                }
            ]
        }
    ]
}");
        // Player
        m_Player = asset.FindActionMap("Player", throwIfNotFound: true);
        m_Player_Mouvement = m_Player.FindAction("Mouvement", throwIfNotFound: true);
        m_Player_Saut = m_Player.FindAction("Saut", throwIfNotFound: true);
        m_Player_PouvoirAir = m_Player.FindAction("Pouvoir Air", throwIfNotFound: true);
        m_Player_PouvoirEau = m_Player.FindAction("Pouvoir Eau", throwIfNotFound: true);
        m_Player_PouvoirTerre = m_Player.FindAction("Pouvoir Terre", throwIfNotFound: true);
        m_Player_PouvoirFeu = m_Player.FindAction("Pouvoir Feu", throwIfNotFound: true);
        m_Player_Recommencer = m_Player.FindAction("Recommencer", throwIfNotFound: true);
        m_Player_Pause = m_Player.FindAction("Pause", throwIfNotFound: true);
        // UI
        m_UI = asset.FindActionMap("UI", throwIfNotFound: true);
        m_UI_Sortir = m_UI.FindAction("Sortir", throwIfNotFound: true);
    }

    ~@PlayerControls()
    {
        UnityEngine.Debug.Assert(!m_Player.enabled, "This will cause a leak and performance issues, PlayerControls.Player.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_UI.enabled, "This will cause a leak and performance issues, PlayerControls.UI.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Player
    private readonly InputActionMap m_Player;
    private List<IPlayerActions> m_PlayerActionsCallbackInterfaces = new List<IPlayerActions>();
    private readonly InputAction m_Player_Mouvement;
    private readonly InputAction m_Player_Saut;
    private readonly InputAction m_Player_PouvoirAir;
    private readonly InputAction m_Player_PouvoirEau;
    private readonly InputAction m_Player_PouvoirTerre;
    private readonly InputAction m_Player_PouvoirFeu;
    private readonly InputAction m_Player_Recommencer;
    private readonly InputAction m_Player_Pause;
    public struct PlayerActions
    {
        private @PlayerControls m_Wrapper;
        public PlayerActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Mouvement => m_Wrapper.m_Player_Mouvement;
        public InputAction @Saut => m_Wrapper.m_Player_Saut;
        public InputAction @PouvoirAir => m_Wrapper.m_Player_PouvoirAir;
        public InputAction @PouvoirEau => m_Wrapper.m_Player_PouvoirEau;
        public InputAction @PouvoirTerre => m_Wrapper.m_Player_PouvoirTerre;
        public InputAction @PouvoirFeu => m_Wrapper.m_Player_PouvoirFeu;
        public InputAction @Recommencer => m_Wrapper.m_Player_Recommencer;
        public InputAction @Pause => m_Wrapper.m_Player_Pause;
        public InputActionMap Get() { return m_Wrapper.m_Player; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(PlayerActions set) { return set.Get(); }
        public void AddCallbacks(IPlayerActions instance)
        {
            if (instance == null || m_Wrapper.m_PlayerActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Add(instance);
            @Mouvement.started += instance.OnMouvement;
            @Mouvement.performed += instance.OnMouvement;
            @Mouvement.canceled += instance.OnMouvement;
            @Saut.started += instance.OnSaut;
            @Saut.performed += instance.OnSaut;
            @Saut.canceled += instance.OnSaut;
            @PouvoirAir.started += instance.OnPouvoirAir;
            @PouvoirAir.performed += instance.OnPouvoirAir;
            @PouvoirAir.canceled += instance.OnPouvoirAir;
            @PouvoirEau.started += instance.OnPouvoirEau;
            @PouvoirEau.performed += instance.OnPouvoirEau;
            @PouvoirEau.canceled += instance.OnPouvoirEau;
            @PouvoirTerre.started += instance.OnPouvoirTerre;
            @PouvoirTerre.performed += instance.OnPouvoirTerre;
            @PouvoirTerre.canceled += instance.OnPouvoirTerre;
            @PouvoirFeu.started += instance.OnPouvoirFeu;
            @PouvoirFeu.performed += instance.OnPouvoirFeu;
            @PouvoirFeu.canceled += instance.OnPouvoirFeu;
            @Recommencer.started += instance.OnRecommencer;
            @Recommencer.performed += instance.OnRecommencer;
            @Recommencer.canceled += instance.OnRecommencer;
            @Pause.started += instance.OnPause;
            @Pause.performed += instance.OnPause;
            @Pause.canceled += instance.OnPause;
        }

        private void UnregisterCallbacks(IPlayerActions instance)
        {
            @Mouvement.started -= instance.OnMouvement;
            @Mouvement.performed -= instance.OnMouvement;
            @Mouvement.canceled -= instance.OnMouvement;
            @Saut.started -= instance.OnSaut;
            @Saut.performed -= instance.OnSaut;
            @Saut.canceled -= instance.OnSaut;
            @PouvoirAir.started -= instance.OnPouvoirAir;
            @PouvoirAir.performed -= instance.OnPouvoirAir;
            @PouvoirAir.canceled -= instance.OnPouvoirAir;
            @PouvoirEau.started -= instance.OnPouvoirEau;
            @PouvoirEau.performed -= instance.OnPouvoirEau;
            @PouvoirEau.canceled -= instance.OnPouvoirEau;
            @PouvoirTerre.started -= instance.OnPouvoirTerre;
            @PouvoirTerre.performed -= instance.OnPouvoirTerre;
            @PouvoirTerre.canceled -= instance.OnPouvoirTerre;
            @PouvoirFeu.started -= instance.OnPouvoirFeu;
            @PouvoirFeu.performed -= instance.OnPouvoirFeu;
            @PouvoirFeu.canceled -= instance.OnPouvoirFeu;
            @Recommencer.started -= instance.OnRecommencer;
            @Recommencer.performed -= instance.OnRecommencer;
            @Recommencer.canceled -= instance.OnRecommencer;
            @Pause.started -= instance.OnPause;
            @Pause.performed -= instance.OnPause;
            @Pause.canceled -= instance.OnPause;
        }

        public void RemoveCallbacks(IPlayerActions instance)
        {
            if (m_Wrapper.m_PlayerActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IPlayerActions instance)
        {
            foreach (var item in m_Wrapper.m_PlayerActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_PlayerActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public PlayerActions @Player => new PlayerActions(this);

    // UI
    private readonly InputActionMap m_UI;
    private List<IUIActions> m_UIActionsCallbackInterfaces = new List<IUIActions>();
    private readonly InputAction m_UI_Sortir;
    public struct UIActions
    {
        private @PlayerControls m_Wrapper;
        public UIActions(@PlayerControls wrapper) { m_Wrapper = wrapper; }
        public InputAction @Sortir => m_Wrapper.m_UI_Sortir;
        public InputActionMap Get() { return m_Wrapper.m_UI; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(UIActions set) { return set.Get(); }
        public void AddCallbacks(IUIActions instance)
        {
            if (instance == null || m_Wrapper.m_UIActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_UIActionsCallbackInterfaces.Add(instance);
            @Sortir.started += instance.OnSortir;
            @Sortir.performed += instance.OnSortir;
            @Sortir.canceled += instance.OnSortir;
        }

        private void UnregisterCallbacks(IUIActions instance)
        {
            @Sortir.started -= instance.OnSortir;
            @Sortir.performed -= instance.OnSortir;
            @Sortir.canceled -= instance.OnSortir;
        }

        public void RemoveCallbacks(IUIActions instance)
        {
            if (m_Wrapper.m_UIActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(IUIActions instance)
        {
            foreach (var item in m_Wrapper.m_UIActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_UIActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public UIActions @UI => new UIActions(this);
    private int m_KeyboardSchemeIndex = -1;
    public InputControlScheme KeyboardScheme
    {
        get
        {
            if (m_KeyboardSchemeIndex == -1) m_KeyboardSchemeIndex = asset.FindControlSchemeIndex("Keyboard");
            return asset.controlSchemes[m_KeyboardSchemeIndex];
        }
    }
    public interface IPlayerActions
    {
        void OnMouvement(InputAction.CallbackContext context);
        void OnSaut(InputAction.CallbackContext context);
        void OnPouvoirAir(InputAction.CallbackContext context);
        void OnPouvoirEau(InputAction.CallbackContext context);
        void OnPouvoirTerre(InputAction.CallbackContext context);
        void OnPouvoirFeu(InputAction.CallbackContext context);
        void OnRecommencer(InputAction.CallbackContext context);
        void OnPause(InputAction.CallbackContext context);
    }
    public interface IUIActions
    {
        void OnSortir(InputAction.CallbackContext context);
    }
}
